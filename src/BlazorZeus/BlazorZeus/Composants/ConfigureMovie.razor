@using Models

<div>

	<div>
		<div><b>Nom du fichier : </b></div>
		<div><i>@NomDuFichier</i></div>
	</div>

	<span>
		<b>Un autre titre ?</b>
		<input @bind-value="@NouveauTitre" />
		<button @onclick="@GetTitre">Chercher</button>
	</span>

	<div>
		<span>
			<b>Changer la qualité ?</b>
			<select @bind="QualitySelected">
				<option />
				<option value="4K">4K</option>
				<option value="1080p">1080p</option>
			</select>
			<button @onclick="@OnClick">Valider</button>
		</span>
	</div>
	

	<div class="zeusflex maxHeight500pxWithScroll">
		@foreach (var film in ListFilms)
		{
			<ImageSearchVideo Titre="@film.Titre"
							  UrlAffiche="@film.UrlAffiche"
							  SelectThisMovie="@(e => GetId(@film.IdVideoTmDb))"
							  DateRelease="@film.ReleaseDate" />
		}
	</div>

	<div>
		<button onclick="@OnCancel">Cancel</button>
	</div>


</div>

@code {

	[Parameter]
	public IEnumerable<SearchVideoModel> ListFilms { get; set; }

	[Parameter]
	public EventCallback OnCancel { get; set; }

	[Parameter]
	public EventCallback<int> SelectMovie { get; set; }

	[Parameter]
	public string NomDuFichier { get; set; }

	[Parameter]
	public EventCallback<string> GetNouveauTitre { get; set; }

	public string NouveauTitre { get; set; }
	public string QualitySelected { get; set; }

	[Parameter]
	public EventCallback<string> OnChangeQuality { get; set; }

	public void GetId(int id)
	{
		SelectMovie.InvokeAsync(id);
	}


	public void GetTitre()
	{
		if(!string.IsNullOrEmpty(NouveauTitre))
			GetNouveauTitre.InvokeAsync(NouveauTitre);
	}

	public void OnClick()
	{
		OnChangeQuality.InvokeAsync(QualitySelected);
	}

}
